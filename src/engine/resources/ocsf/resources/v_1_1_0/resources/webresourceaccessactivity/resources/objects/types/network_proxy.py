# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..........core.datetime_utils import serialize_datetime
from ...base.types.hostname import Hostname
from ...base.types.ip_address import IpAddress
from ...base.types.mac_address import MacAddress
from ...base.types.port import Port
from .container import Container
from .device_hw_info import DeviceHwInfo
from .location import Location
from .network_proxy_type_id import NetworkProxyTypeId
from .os import Os

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class NetworkProxy(pydantic.BaseModel):
    """
    The network proxy endpoint object describes a proxy server, which acts as an intermediary between a client requesting a resource and the server providing that resource. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:ProxyServer/'>d3f:ProxyServer</a>.
    """

    container: typing.Optional[Container] = pydantic.Field(
        description="The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd."
    )
    domain: typing.Optional[str] = pydantic.Field(description="The name of the domain.")
    hostname: typing.Optional[Hostname] = pydantic.Field(description="The fully qualified name of the endpoint.")
    hw_info: typing.Optional[DeviceHwInfo] = pydantic.Field(description="The endpoint hardware information.")
    instance_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of a VM instance.")
    interface_name: typing.Optional[str] = pydantic.Field(description="The name of the network interface (e.g. eth2).")
    interface_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of the network interface.")
    intermediate_ips: typing.Optional[typing.List[IpAddress]] = pydantic.Field(
        description="The intermediate IP Addresses. For example, the IP addresses in the HTTP X-Forwarded-For header."
    )
    ip: typing.Optional[IpAddress] = pydantic.Field(
        description="The IP address of the endpoint, in either IPv4 or IPv6 format."
    )
    location: typing.Optional[Location] = pydantic.Field(description="The geographical location of the endpoint.")
    mac: typing.Optional[MacAddress] = pydantic.Field(
        description="The Media Access Control (MAC) address of the endpoint."
    )
    name: typing.Optional[str] = pydantic.Field(description="The short name of the endpoint.")
    namespace_pid: typing.Optional[int] = pydantic.Field(
        description="If running under a process namespace (such as in a container), the process identifier within that process namespace."
    )
    os: typing.Optional[Os] = pydantic.Field(description="The endpoint operating system.")
    port: typing.Optional[Port] = pydantic.Field(
        description="The port used for communication within the network connection."
    )
    proxy_endpoint: typing.Optional[NetworkProxy] = pydantic.Field(
        description="The network proxy information pertaining to a specific endpoint. This can be used to describe information pertaining to network address translation (NAT)."
    )
    subnet_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of a virtual subnet.")
    svc_name: typing.Optional[str] = pydantic.Field(
        description="The service name in service-to-service connections. For example, AWS VPC logs the pkt-src-aws-service and pkt-dst-aws-service fields identify the connection is coming from or going to an AWS service."
    )
    type: typing.Optional[str] = pydantic.Field(
        description="The network endpoint type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, or <code>other</code>."
    )
    type_id: typing.Optional[NetworkProxyTypeId] = pydantic.Field(description="The network endpoint type ID.")
    uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of the endpoint.")
    vlan_uid: typing.Optional[str] = pydantic.Field(description="The Virtual LAN identifier.")
    vpc_uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the Virtual Private Cloud (VPC)."
    )
    zone: typing.Optional[str] = pydantic.Field(description="The network zone or LAN segment.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


NetworkProxy.update_forward_refs()
