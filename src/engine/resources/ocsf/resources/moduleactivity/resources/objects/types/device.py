# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ........core.datetime_utils import serialize_datetime
from ...base.types.hostname import Hostname
from ...base.types.ip_address import IpAddress
from ...base.types.mac_address import MacAddress
from ...base.types.subnet import Subnet
from ...base.types.timestamp import Timestamp
from .device_hw_info import DeviceHwInfo
from .device_risk_level_id import DeviceRiskLevelId
from .device_type_id import DeviceTypeId
from .group import Group
from .image import Image
from .location import Location
from .network_interface import NetworkInterface
from .organization import Organization
from .os import Os


class Device(pydantic.BaseModel):
    """
    The Device object represents an addressable computer system or host, which is typically connected to a computer network and participates in the transmission or processing of data within the computer network. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Host/'>d3f:Host</a>.
    """

    autoscale_uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the cloud autoscale configuration."
    )
    created_time: typing.Optional[Timestamp] = pydantic.Field(
        description="The time when the device was known to have been created."
    )
    created_time_dt: typing.Optional[dt.datetime] = pydantic.Field(
        description="The time when the device was known to have been created."
    )
    desc: typing.Optional[str] = pydantic.Field(
        description="The description of the device, ordinarily as reported by the operating system."
    )
    domain: typing.Optional[str] = pydantic.Field(
        description="The network domain where the device resides. For example: <code>work.example.com</code>."
    )
    first_seen_time: typing.Optional[Timestamp] = pydantic.Field(
        description="The initial discovery time of the device."
    )
    first_seen_time_dt: typing.Optional[dt.datetime] = pydantic.Field(
        description="The initial discovery time of the device."
    )
    groups: typing.Optional[typing.List[Group]] = pydantic.Field(
        description='The group names to which the device belongs. For example: <code>["Windows Laptops", "Engineering"]<code/>.'
    )
    hostname: typing.Optional[Hostname] = pydantic.Field(description="The device hostname.")
    hw_info: typing.Optional[DeviceHwInfo] = pydantic.Field(description="The device hardware information.")
    hypervisor: typing.Optional[str] = pydantic.Field(
        description="The name of the hypervisor running on the device. For example, <code>Xen</code>, <code>VMware</code>, <code>Hyper-V</code>, <code>VirtualBox</code>, etc."
    )
    image: typing.Optional[Image] = pydantic.Field(
        description="The image used as a template to run the virtual machine."
    )
    imei: typing.Optional[str] = pydantic.Field(
        description="The International Mobile Station Equipment Identifier that is associated with the device."
    )
    instance_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of a VM instance.")
    interface_name: typing.Optional[str] = pydantic.Field(description="The name of the network interface (e.g. eth2).")
    interface_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of the network interface.")
    ip: typing.Optional[IpAddress] = pydantic.Field(description="The device IP address, in either IPv4 or IPv6 format.")
    is_compliant: typing.Optional[bool] = pydantic.Field(description="The event occurred on a compliant device.")
    is_managed: typing.Optional[bool] = pydantic.Field(description="The event occurred on a managed device.")
    is_personal: typing.Optional[bool] = pydantic.Field(description="The event occurred on a personal device.")
    is_trusted: typing.Optional[bool] = pydantic.Field(description="The event occurred on a trusted device.")
    last_seen_time: typing.Optional[Timestamp] = pydantic.Field(
        description="The most recent discovery time of the device."
    )
    last_seen_time_dt: typing.Optional[dt.datetime] = pydantic.Field(
        description="The most recent discovery time of the device."
    )
    location: typing.Optional[Location] = pydantic.Field(description="The geographical location of the device.")
    mac: typing.Optional[MacAddress] = pydantic.Field(description="The device Media Access Control (MAC) address.")
    modified_time: typing.Optional[Timestamp] = pydantic.Field(
        description="The time when the device was last known to have been modified."
    )
    modified_time_dt: typing.Optional[dt.datetime] = pydantic.Field(
        description="The time when the device was last known to have been modified."
    )
    name: typing.Optional[str] = pydantic.Field(
        description="The alternate device name, ordinarily as assigned by an administrator. <p><b>Note:</b> The <b>Name</b> could be any other string that helps to identify the device, such as a phone number; for example <code>310-555-1234</code>.</p>"
    )
    network_interfaces: typing.Optional[typing.List[NetworkInterface]] = pydantic.Field(
        description="The network interfaces that are associated with the device, one for each MAC address/IP address combination.<p><b>Note:</b> The first element of the array is the network information that pertains to the event.</p>"
    )
    org: typing.Optional[Organization] = pydantic.Field(description="Organization and org unit related to the device.")
    os: typing.Optional[Os] = pydantic.Field(description="The device operating system.")
    region: typing.Optional[str] = pydantic.Field(
        description="The region where the virtual machine is located. For example, an AWS Region."
    )
    risk_level: typing.Optional[str] = pydantic.Field(
        description="The risk level, normalized to the caption of the risk_level_id value. In the case of 'Other', it is defined by the event source."
    )
    risk_level_id: typing.Optional[DeviceRiskLevelId] = pydantic.Field(description="The normalized risk level id.")
    risk_score: typing.Optional[int] = pydantic.Field(description="The risk score as reported by the event source.")
    subnet: typing.Optional[Subnet] = pydantic.Field(description="The subnet mask.")
    subnet_uid: typing.Optional[str] = pydantic.Field(description="The unique identifier of a virtual subnet.")
    type: typing.Optional[str] = pydantic.Field(
        description="The device type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, or <code>other</code>."
    )
    type_id: DeviceTypeId = pydantic.Field(description="The device type ID.")
    uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the device. For example the Windows TargetSID or AWS EC2 ARN."
    )
    uid_alt: typing.Optional[str] = pydantic.Field(
        description="An alternate unique identifier of the device if any. For example the ActiveDirectory DN."
    )
    vlan_uid: typing.Optional[str] = pydantic.Field(description="The Virtual LAN identifier.")
    vpc_uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the Virtual Private Cloud (VPC)."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
