# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ........core.datetime_utils import serialize_datetime
from .cve import Cve
from .package import Package

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Vulnerability(pydantic.BaseModel):
    """
    The Vulnerability Details object describes characteristics of an observed vulnerability.
    """

    cve: Cve = pydantic.Field(
        description="The Common Vulnerabilities and Exposures (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>)."
    )
    desc: typing.Optional[str] = pydantic.Field(description="The description of the vulnerability.")
    fix_available: typing.Optional[bool] = pydantic.Field(
        description="Indicates if a fix is available for the reported vulnerability."
    )
    kb_articles: typing.Optional[typing.List[str]] = pydantic.Field(
        description="The KB article/s related to the entity"
    )
    packages: typing.Optional[typing.List[Package]] = pydantic.Field(
        description="List of vulnerable packages as identified by the security product"
    )
    references: typing.Optional[typing.List[str]] = pydantic.Field(description="Supporting reference URLs")
    related_vulnerabilities: typing.Optional[typing.List[str]] = pydantic.Field(
        description="List of vulnerabilities that are related to this vulnerability."
    )
    severity: typing.Optional[str] = pydantic.Field(
        description="The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source."
    )
    title: typing.Optional[str] = pydantic.Field(description="The title of the vulnerability.")
    vendor_name: typing.Optional[str] = pydantic.Field(description="The vendor who identified the vulnerability.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
