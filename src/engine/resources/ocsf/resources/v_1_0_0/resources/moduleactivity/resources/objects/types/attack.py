# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..........core.datetime_utils import serialize_datetime
from .tactic import Tactic
from .technique import Technique

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Attack(pydantic.BaseModel):
    """
    The Attack object describes the technique and associated tactics related to an attack. See <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CKÂ®</a>.
    """

    tactics: typing.List[Tactic] = pydantic.Field(
        description="The a list of tactic ID's/names that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>."
    )
    technique: Technique = pydantic.Field(description="The attack technique.")
    version: str = pydantic.Field(description="The ATT&CK Matrix version.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
