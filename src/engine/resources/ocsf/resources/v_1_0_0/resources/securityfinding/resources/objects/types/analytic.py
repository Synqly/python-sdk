# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..........core.datetime_utils import serialize_datetime
from .analytic_type_id import AnalyticTypeId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Analytic(pydantic.BaseModel):
    """
    The Analytic object contains details about the analytic technique used to analyze and derive insights from the data or information that led to the finding or conclusion.
    """

    category: typing.Optional[str] = pydantic.Field(description="The analytic category.")
    desc: typing.Optional[str] = pydantic.Field(
        description="The description of the analytic that generated the finding."
    )
    name: str = pydantic.Field(description="The name of the analytic that generated the finding.")
    related_analytics: typing.Optional[typing.List[Analytic]] = pydantic.Field(
        description="Describes analytics related to the analytic of a finding or detection as identified by the security product."
    )
    type: typing.Optional[str] = pydantic.Field(description="The analytic type.")
    type_id: AnalyticTypeId = pydantic.Field(description="The analytic type ID.")
    uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the analytic that generated the finding."
    )
    version: typing.Optional[str] = pydantic.Field(description="The analytic version. For example: <code>1.1</code>.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


Analytic.update_forward_refs()
