# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SynqlyManagementEnvironment
from .resources.accounts.client import AccountsClient, AsyncAccountsClient
from .resources.audit.client import AsyncAuditClient, AuditClient
from .resources.capabilities.client import AsyncCapabilitiesClient, CapabilitiesClient
from .resources.credentials.client import AsyncCredentialsClient, CredentialsClient
from .resources.integrations.client import AsyncIntegrationsClient, IntegrationsClient
from .resources.members.client import AsyncMembersClient, MembersClient
from .resources.status.client import AsyncStatusClient, StatusClient
from .resources.tokens.client import AsyncTokensClient, TokensClient
from .resources.transforms.client import AsyncTransformsClient, TransformsClient


class SynqlyManagement:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SynqlyManagementEnvironment = SynqlyManagementEnvironment.SYNQLY,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.audit = AuditClient(client_wrapper=self._client_wrapper)
        self.capabilities = CapabilitiesClient(client_wrapper=self._client_wrapper)
        self.credentials = CredentialsClient(client_wrapper=self._client_wrapper)
        self.integrations = IntegrationsClient(client_wrapper=self._client_wrapper)
        self.members = MembersClient(client_wrapper=self._client_wrapper)
        self.status = StatusClient(client_wrapper=self._client_wrapper)
        self.tokens = TokensClient(client_wrapper=self._client_wrapper)
        self.transforms = TransformsClient(client_wrapper=self._client_wrapper)


class AsyncSynqlyManagement:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SynqlyManagementEnvironment = SynqlyManagementEnvironment.SYNQLY,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.audit = AsyncAuditClient(client_wrapper=self._client_wrapper)
        self.capabilities = AsyncCapabilitiesClient(client_wrapper=self._client_wrapper)
        self.credentials = AsyncCredentialsClient(client_wrapper=self._client_wrapper)
        self.integrations = AsyncIntegrationsClient(client_wrapper=self._client_wrapper)
        self.members = AsyncMembersClient(client_wrapper=self._client_wrapper)
        self.status = AsyncStatusClient(client_wrapper=self._client_wrapper)
        self.tokens = AsyncTokensClient(client_wrapper=self._client_wrapper)
        self.transforms = AsyncTransformsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SynqlyManagementEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
