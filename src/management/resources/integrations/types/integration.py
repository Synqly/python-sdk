# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...accounts.types.account_id import AccountId
from ...capabilities.types.category_id import CategoryId
from ...common.types.base import Base
from ...token_base.types.token_id import TokenId
from .integration_id import IntegrationId
from .provider_config import ProviderConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Integration(Base):
    """
    Connects an Account to an external service
    """

    id: IntegrationId
    fullname: str = pydantic.Field(description="Human friendly display name for this integration.")
    refresh_token_id: TokenId = pydantic.Field(description="Integration refresh token id")
    account_id: AccountId = pydantic.Field(description="Account that manages this Integration.")
    category: CategoryId = pydantic.Field(description="Id of the Connector Category for this Integration.")
    provider_config: ProviderConfig = pydantic.Field(description="Provider configuration for this Integration.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
