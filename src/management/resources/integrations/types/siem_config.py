# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...credentials.types.credential_id import CredentialId
from ...transforms.types.transform_id import TransformId
from .siem_provider_type_config import SiemProviderTypeConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SiemConfig(pydantic.BaseModel):
    """
    Configuration for a SIEM Provider
    """

    credential_id: CredentialId
    url: typing.Optional[str] = pydantic.Field(
        description="URL used for connecting to the external service. If not provided, will connect to the default endpoint for the Provider"
    )
    transforms: typing.Optional[typing.List[TransformId]] = pydantic.Field(
        description="Optional list of transformations used to modify requests before they are sent to the external service."
    )
    config: typing.Optional[SiemProviderTypeConfig]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
