# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...capabilities_base.types.category_id import CategoryId
from .capabilities_provider_config import CapabilitiesProviderConfig
from .provider_credential_config import ProviderCredentialConfig
from .provider_id import ProviderId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Provider(pydantic.BaseModel):
    id: ProviderId
    name: str = pydantic.Field(description="Name of the Provider.")
    description: str = pydantic.Field(description="Description of what this Provider does.")
    categories: typing.List[CategoryId] = pydantic.Field(description="Categories that this Provider implements.")
    picture: typing.Optional[str] = pydantic.Field(description="URL of the icon representing this type of Provider.")
    supported_operations: typing.Any = pydantic.Field(description="Operations that this Provider implements.")
    credentials: typing.List[ProviderCredentialConfig] = pydantic.Field(
        description="List of credential types that this Provider supports."
    )
    provider_config: typing.Dict[str, CapabilitiesProviderConfig] = pydantic.Field(
        description="Details on the specific configuration options for this Provider."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
