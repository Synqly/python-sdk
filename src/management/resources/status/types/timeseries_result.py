# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime


class TimeseriesResult(pydantic.BaseModel):
    """
    Status timeseries object
    """

    created_at: dt.datetime = pydantic.Field(description="Interval time")
    succeeded: int = pydantic.Field(description="Succeeded count")
    failed: int = pydantic.Field(description="Failed count")
    cpu_time: int = pydantic.Field(description="Cpu time in microseconds")
    db_ops: int = pydantic.Field(description="Database operations count")
    api_ops: int = pydantic.Field(description="API operations count")
    in_bytes: int = pydantic.Field(description="API input byte count")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
