# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class QueryEventStatus(str, enum.Enum):
    PENDING = "PENDING"
    """
    [deprecated] use `QueryStatusPending` instead
    """

    COMPLETE = "COMPLETE"
    """
    [deprecated] use `QueryStatusComplete` instead
    """

    _UNKNOWN = "__QUERYEVENTSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "QueryEventStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        pending: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is QueryEventStatus.PENDING:
            return pending()
        if self is QueryEventStatus.COMPLETE:
            return complete()
        return _unknown_member(self._value_)
