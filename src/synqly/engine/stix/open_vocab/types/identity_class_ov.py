# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class IdentityClassOv(str, enum.Enum):
    INDIVIDUAL = "individual"
    GROUP = "group"
    SYSTEM = "system"
    ORGANIZATION = "organization"
    CLASS = "class"
    UNKNOWN = "unknown"
    _UNKNOWN = "__IDENTITYCLASSOV_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "IdentityClassOv":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        individual: typing.Callable[[], T_Result],
        group: typing.Callable[[], T_Result],
        system: typing.Callable[[], T_Result],
        organization: typing.Callable[[], T_Result],
        class_: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is IdentityClassOv.INDIVIDUAL:
            return individual()
        if self is IdentityClassOv.GROUP:
            return group()
        if self is IdentityClassOv.SYSTEM:
            return system()
        if self is IdentityClassOv.ORGANIZATION:
            return organization()
        if self is IdentityClassOv.CLASS:
            return class_()
        if self is IdentityClassOv.UNKNOWN:
            return unknown()
        return _unknown_member(self._value_)
