# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...common.types.id import Id
from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from ...operation_base.types.async_operation_request_id import AsyncOperationRequestId
from ...operation_base.types.operation_error import OperationError
from ...operation_base.types.operation_input import OperationInput
from ...operation_base.types.operation_schedule import OperationSchedule
from ...operation_base.types.operation_status import OperationStatus
from ...organization_webhook_base.types.webhook_filter import WebhookFilter


class OperationWebhookPayload(UncheckedBaseModel):
    event: WebhookFilter = pydantic_v1.Field()
    """
    The event that triggered the webhook
    """

    nonce: str = pydantic_v1.Field()
    """
    A unique identifier for this webhook event
    """

    id: AsyncOperationRequestId = pydantic_v1.Field()
    """
    ID of the operation
    """

    created_at: dt.datetime = pydantic_v1.Field()
    """
    Time object was originally created
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    Last time object was updated
    """

    schedule: typing.Optional[OperationSchedule] = pydantic_v1.Field(default=None)
    """
    Run now or on the specified schedule.
    """

    operation: str = pydantic_v1.Field()
    """
    Name of the operation that will be run for this operation.
    """

    account_id: Id = pydantic_v1.Field()
    """
    Account ID containing the integration.
    """

    integration_id: Id = pydantic_v1.Field()
    """
    Integration ID to use for the operation.
    """

    input: OperationInput = pydantic_v1.Field()
    """
    Input parameters for the operation that will be run for this operation.
    """

    status: OperationStatus = pydantic_v1.Field()
    """
    Status of the operation
    """

    errors: typing.Optional[typing.List[OperationError]] = pydantic_v1.Field(default=None)
    """
    Errors that occurred during the operation
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
