# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ScanDayOption(str, enum.Enum):
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"
    _UNKNOWN = "__SCANDAYOPTION_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ScanDayOption":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        monday: typing.Callable[[], T_Result],
        tuesday: typing.Callable[[], T_Result],
        wednesday: typing.Callable[[], T_Result],
        thursday: typing.Callable[[], T_Result],
        friday: typing.Callable[[], T_Result],
        saturday: typing.Callable[[], T_Result],
        sunday: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ScanDayOption.MONDAY:
            return monday()
        if self is ScanDayOption.TUESDAY:
            return tuesday()
        if self is ScanDayOption.WEDNESDAY:
            return wednesday()
        if self is ScanDayOption.THURSDAY:
            return thursday()
        if self is ScanDayOption.FRIDAY:
            return friday()
        if self is ScanDayOption.SATURDAY:
            return saturday()
        if self is ScanDayOption.SUNDAY:
            return sunday()
        return _unknown_member(self._value_)
