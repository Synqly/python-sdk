# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ScanFrequencyOption(str, enum.Enum):
    ONCE = "once"
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    YEARLY = "yearly"
    UNKNOWN = "unknown"
    _UNKNOWN = "__SCANFREQUENCYOPTION_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ScanFrequencyOption":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        once: typing.Callable[[], T_Result],
        daily: typing.Callable[[], T_Result],
        weekly: typing.Callable[[], T_Result],
        monthly: typing.Callable[[], T_Result],
        yearly: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ScanFrequencyOption.ONCE:
            return once()
        if self is ScanFrequencyOption.DAILY:
            return daily()
        if self is ScanFrequencyOption.WEEKLY:
            return weekly()
        if self is ScanFrequencyOption.MONTHLY:
            return monthly()
        if self is ScanFrequencyOption.YEARLY:
            return yearly()
        if self is ScanFrequencyOption.UNKNOWN:
            return unknown()
        return _unknown_member(self._value_)
