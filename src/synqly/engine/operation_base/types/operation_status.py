# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OperationStatus(str, enum.Enum):
    SCHEDULED = "SCHEDULED"
    PROCESSING = "PROCESSING"
    CANCELLED = "CANCELLED"
    COMPLETE = "COMPLETE"
    _UNKNOWN = "__OPERATIONSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "OperationStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        scheduled: typing.Callable[[], T_Result],
        processing: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is OperationStatus.SCHEDULED:
            return scheduled()
        if self is OperationStatus.PROCESSING:
            return processing()
        if self is OperationStatus.CANCELLED:
            return cancelled()
        if self is OperationStatus.COMPLETE:
            return complete()
        return _unknown_member(self._value_)
