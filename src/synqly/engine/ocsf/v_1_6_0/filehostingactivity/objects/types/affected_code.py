# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .file import File
from .remediation import Remediation
from .rule import Rule
from .user import User


class AffectedCode(UncheckedBaseModel):
    """
    The Affected Code object describes details about a code block identified as vulnerable.
    """

    end_column: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The column number of the last part of the assessed code identified as vulnerable.
    """

    end_line: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The line number of the last line of code block identified as vulnerable.
    """

    file: File = pydantic_v1.Field()
    """
    Details about the file that contains the affected code block.
    """

    owner: typing.Optional[User] = pydantic_v1.Field(default=None)
    """
    Details about the user that owns the affected file.
    """

    remediation: typing.Optional[Remediation] = pydantic_v1.Field(default=None)
    """
    Describes the recommended remediation steps to address identified issue(s).
    """

    rule: typing.Optional[Rule] = pydantic_v1.Field(default=None)
    """
    Details about the specific rule, e.g., those defined as part of a larger <code>policy</code>, that triggered the finding.
    """

    start_column: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The column number of the first part of the assessed code identified as vulnerable.
    """

    start_line: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The line number of the first line of code block identified as vulnerable.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
