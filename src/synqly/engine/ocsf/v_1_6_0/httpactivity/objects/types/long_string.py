# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel


class LongString(UncheckedBaseModel):
    """
    This object is a used to capture strings which may be truncated by a security product due to their length.
    """

    is_truncated: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Indicates that <code>value</code> has been truncated. May be omitted if truncation has not occurred.
    """

    untruncated_size: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The size in bytes of the string represented by <code>value</code> before truncation. Should be omitted if truncation has not occurred.
    """

    value: str = pydantic_v1.Field()
    """
    The string value, truncated if <code>is_truncated</code> is <code>true</code>.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
