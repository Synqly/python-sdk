# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .analytic_state_id import AnalyticStateId
from .analytic_type_id import AnalyticTypeId
from .object import Object


class Analytic(UncheckedBaseModel):
    """
    The Analytic object contains details about the analytic technique used to analyze and derive insights from the data or information that led to the creation of a finding or conclusion.
    """

    algorithm: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The algorithm used by the underlying analytic to generate the finding.
    """

    category: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The analytic category.
    """

    desc: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The description of the analytic that generated the finding.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The name of the analytic that generated the finding.
    """

    related_analytics: typing.Optional[typing.List[Object]] = pydantic_v1.Field(default=None)
    """
    Other analytics related to this analytic.
    """

    state: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Analytic state.
    """

    state_id: typing.Optional[AnalyticStateId] = pydantic_v1.Field(default=None)
    """
    The Analytic state identifier.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The analytic type.
    """

    type_id: AnalyticTypeId = pydantic_v1.Field()
    """
    The analytic type ID.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The unique identifier of the analytic that generated the finding.
    """

    version: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The analytic version. For example: <code>1.1</code>.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
