# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .actor_actor_type_id import ActorActorTypeId
from .authorization import Authorization
from .group import Group
from .idp import Idp
from .process import Process
from .session import Session
from .user import User


class Actor(UncheckedBaseModel):
    """
    The Actor object contains details about the user, role, application, service, or process that initiated or performed a specific activity. Note that Actor is not the threat actor of a campaign but may be part of a campaign.
    """

    actor_type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The actor type, normalized to the caption of the actor_type_id value. In the case of 'Other', it is defined by the data source.
    """

    actor_type_id: typing.Optional[ActorActorTypeId] = pydantic_v1.Field(default=None)
    """
    The normalized identifier of the actor type.
    """

    app_name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The client application or service that initiated the activity. This can be in conjunction with the <code>user</code> if present. Note that <code>app_name</code> is distinct from the <code>process</code> if present.
    """

    app_uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The unique identifier of the client application or service that initiated the activity. This can be in conjunction with the <code>user</code> if present. Note that <code>app_name</code> is distinct from the <code>process.pid</code> or <code>process.uid</code> if present.
    """

    authorizations: typing.Optional[typing.List[Authorization]] = pydantic_v1.Field(default=None)
    """
    Provides details about an authorization, such as authorization outcome, and any associated policies related to the activity/event.
    """

    groups: typing.Optional[typing.List[Group]] = pydantic_v1.Field(default=None)
    """
    Groups which are pertinent to the action. For example, the team name for Teams, where the user may not necessarily be a member of the group, but it is still relevant to the action taken.
    """

    idp: typing.Optional[Idp] = pydantic_v1.Field(default=None)
    """
    This object describes details about the Identity Provider used.
    """

    invoked_by: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The name of the service that invoked the activity as described in the event.
    """

    process: typing.Optional[Process] = pydantic_v1.Field(default=None)
    """
    The process that initiated the activity.
    """

    session: typing.Optional[Session] = pydantic_v1.Field(default=None)
    """
    The user session from which the activity was initiated.
    """

    user: typing.Optional[User] = pydantic_v1.Field(default=None)
    """
    The user that initiated the activity or the user context from which the activity was initiated.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
