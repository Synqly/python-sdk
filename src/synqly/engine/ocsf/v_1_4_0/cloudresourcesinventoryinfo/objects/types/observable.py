# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .observable_type_id import ObservableTypeId
from .reputation import Reputation


class Observable(UncheckedBaseModel):
    """
    The observable object is a pivot element that contains related information found in many places in the event.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The full name of the observable attribute. The <code>name</code> is a pointer/reference to an attribute within the OCSF event data. For example: <code>file.name</code>.
    """

    reputation: typing.Optional[Reputation] = pydantic_v1.Field(default=None)
    """
    Contains the original and normalized reputation scores.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The observable value type name.
    """

    type_id: ObservableTypeId = pydantic_v1.Field()
    """
    The observable value type identifier.
    """

    value: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The value associated with the observable attribute. The meaning of the value depends on the observable type.<br/>If the <code>name</code> refers to a scalar attribute, then the <code>value</code> is the value of the attribute.<br/>If the <code>name</code> refers to an object attribute, then the <code>value</code> is not populated.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
