# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from ...base.types.timestamp import Timestamp
from .package import Package
from .product import Product
from .sbom_type_id import SbomTypeId
from .software_component import SoftwareComponent


class Sbom(UncheckedBaseModel):
    """
    The Software Bill of Materials object describes characteristics of a generated SBOM.
    """

    created_time: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    The time when the SBOM was created.
    """

    created_time_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The time when the SBOM was created.
    """

    package: Package = pydantic_v1.Field()
    """
    The software package or library that is being discovered or inventoried by an SBOM.
    """

    product: typing.Optional[Product] = pydantic_v1.Field(default=None)
    """
    Details about the upstream product that generated the SBOM e.g. <code>cdxgen</code> or <code>Syft</code>.
    """

    software_components: typing.List[SoftwareComponent] = pydantic_v1.Field()
    """
    The list of software components used in the software package.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The type of SBOM, normalized to the caption of the <code>type_id</code> value. In the case of 'Other', it is defined by the source.
    """

    type_id: typing.Optional[SbomTypeId] = pydantic_v1.Field(default=None)
    """
    The type of SBOM.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A unique identifier for the SBOM or the SBOM generation by a source tool, such as the SPDX <code>metadata.component.bom-ref</code>.
    """

    version: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The specification (spec) version of the particular SBOM, e.g., <code>1.6</code>.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
