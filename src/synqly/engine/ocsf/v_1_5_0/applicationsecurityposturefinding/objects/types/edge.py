# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel


class Edge(UncheckedBaseModel):
    """
    Represents a connection or relationship between two nodes in a graph.
    """

    data: typing.Optional[typing.Any] = pydantic_v1.Field(default=None)
    """
    Additional data about the edge such as weight, distance, or custom properties.
    """

    is_directed: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Indicates whether the edge is (<code>true</code>) or undirected (<code>false</code>).
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The human-readable name or label for the edge.
    """

    relation: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The type of relationship between nodes (e.g. is-attached-to , depends-on, etc).
    """

    source: str = pydantic_v1.Field()
    """
    The unique identifier of the node where the edge originates.
    """

    target: str = pydantic_v1.Field()
    """
    The unique identifier of the node where the edge terminates.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier of the edge.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
