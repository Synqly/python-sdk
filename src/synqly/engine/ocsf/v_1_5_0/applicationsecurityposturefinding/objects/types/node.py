# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel


class Node(UncheckedBaseModel):
    """
    Represents a node or a vertex in a graph structure.
    """

    data: typing.Optional[typing.Any] = pydantic_v1.Field(default=None)
    """
    Additional data about the node stored as key-value pairs. Can include custom properties specific to the node.
    """

    desc: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A human-readable description of the node's purpose or meaning in the graph.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A human-readable name or label for the node. Should be descriptive and unique within the graph context.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Categorizes the node into a specific class or type. Useful for grouping and filtering nodes.
    """

    uid: str = pydantic_v1.Field()
    """
    A unique string or numeric identifier that distinguishes this node from all others in the graph. Must be unique across all nodes.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
