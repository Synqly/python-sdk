# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .reputation_score_id import ReputationScoreId


class Reputation(UncheckedBaseModel):
    """
    The Reputation object describes the reputation/risk score of an entity (e.g. device, user, domain).
    """

    base_score: float = pydantic_v1.Field()
    """
    The reputation score as reported by the event source.
    """

    provider: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The provider of the reputation information.
    """

    score: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The reputation score, normalized to the caption of the score_id value. In the case of 'Other', it is defined by the event source.
    """

    score_id: ReputationScoreId = pydantic_v1.Field()
    """
    The normalized reputation score identifier.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
