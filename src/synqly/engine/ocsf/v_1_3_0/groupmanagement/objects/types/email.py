# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from ...base.types.email_address import EmailAddress
from ...base.types.ip_address import IpAddress
from ...base.types.timestamp import Timestamp
from .file import File


class Email(UncheckedBaseModel):
    """
    The Email object describes the email metadata such as sender, recipients, and direction. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
    """

    bcc: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    The BCC recipients of the email. Similar to cc field but for BCC recipients.
    """

    cc: typing.Optional[typing.List[EmailAddress]] = pydantic_v1.Field(default=None)
    """
    The email header Cc values, as defined by RFC 5322.
    """

    delivered_to: typing.Optional[EmailAddress] = pydantic_v1.Field(default=None)
    """
    The <strong>Delivered-To</strong> email header field.
    """

    files: typing.Optional[typing.List[File]] = pydantic_v1.Field(default=None)
    """
    The files that are part of the event or object.
    """

    from_: EmailAddress = pydantic_v1.Field(alias="from")
    """
    The email header From values, as defined by RFC 5322.
    """

    is_externally_viewable: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    True if the email is viewable externally (presumably by external users).
    """

    labels: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    Labels associated with the object, such as security or sensitivity labels created by a scanning app.
    """

    message_uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The email header Message-Id value, as defined by RFC 5322.
    """

    raw_header: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The email authentication header.
    """

    reply_to: typing.Optional[EmailAddress] = pydantic_v1.Field(default=None)
    """
    The email header Reply-To values, as defined by RFC 5322.
    """

    sender_mailbox_uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique ID of the sender mailbox. This is distinct from the sender's email address.
    """

    size: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The size in bytes of the email, including attachments.
    """

    smtp_from: typing.Optional[EmailAddress] = pydantic_v1.Field(default=None)
    """
    The value of the SMTP MAIL FROM command.
    """

    smtp_to: typing.Optional[typing.List[EmailAddress]] = pydantic_v1.Field(default=None)
    """
    The value of the SMTP envelope RCPT TO command.
    """

    subject: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The email header Subject value, as defined by RFC 5322.
    """

    time_sent: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    The time at which the email was sent.
    """

    time_sent_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The time at which the email was sent.
    """

    to: typing.List[EmailAddress] = pydantic_v1.Field()
    """
    The email header To values, as defined by RFC 5322.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The email unique identifier.
    """

    x_originating_ip: typing.Optional[typing.List[IpAddress]] = pydantic_v1.Field(default=None)
    """
    The X-Originating-IP header identifying the emails originating IP address(es).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
