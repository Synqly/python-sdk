# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel


class EmailAuth(UncheckedBaseModel):
    """
    The Email Authentication object describes the Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM) and Domain-based Message Authentication, Reporting and Conformance (DMARC) attributes of an email.
    """

    dkim: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The DomainKeys Identified Mail (DKIM) status of the email.
    """

    dkim_domain: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The DomainKeys Identified Mail (DKIM) signing domain of the email.
    """

    dkim_signature: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The DomainKeys Identified Mail (DKIM) signature used by the sending/receiving system.
    """

    dmarc: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Domain-based Message Authentication, Reporting and Conformance (DMARC) status of the email.
    """

    dmarc_override: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Domain-based Message Authentication, Reporting and Conformance (DMARC) override action.
    """

    dmarc_policy: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Domain-based Message Authentication, Reporting and Conformance (DMARC) policy status.
    """

    spf: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Sender Policy Framework (SPF) status of the email.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
