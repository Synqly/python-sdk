# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .attack import Attack
from .kill_chain_phase import KillChainPhase
from .observable import Observable


class RelatedEvent(UncheckedBaseModel):
    """
    The Related Event object describes an OCSF event related to a finding.
    """

    attacks: typing.Optional[typing.List[Attack]] = pydantic_v1.Field(default=None)
    """
    An array of <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> objects describing the tactics, techniques & sub-techniques identified by a security control or finding.
    """

    kill_chain: typing.Optional[typing.List[KillChainPhase]] = pydantic_v1.Field(default=None)
    """
    The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a> provides a detailed description of each phase and its associated activities within the broader context of a cyber attack.
    """

    observables: typing.Optional[typing.List[Observable]] = pydantic_v1.Field(default=None)
    """
    The observables associated with the event or a finding.
    """

    product_uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The unique identifier of the product that reported the related event.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The type of the related event, as defined by <code>type_uid</code>. <p>For example: <code>Process Activity: Launch.</code></p>
    """

    type_name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The type of the related OCSF event, as defined by <code>type_uid</code>. <p>For example: <code>Process Activity: Launch.</code></p>
    """

    type_uid: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The unique identifier of the related OCSF event type. <p>For example: <code>100701.</code></p>
    """

    uid: str = pydantic_v1.Field()
    """
    The unique identifier of the related OCSF event. This value must be equal to <code>metadata.uid</code> in the corresponding related event.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
