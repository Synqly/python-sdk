# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from ...base.types.timestamp import Timestamp
from .group import Group


class Table(UncheckedBaseModel):
    """
    The table object represents a table within a structured relational database or datastore, which contains columns and rows of data that are able to be create, updated, deleted and queried.
    """

    created_time: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    The time when the table was known to have been created.
    """

    created_time_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The time when the table was known to have been created.
    """

    desc: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The description of the table.
    """

    groups: typing.Optional[typing.List[Group]] = pydantic_v1.Field(default=None)
    """
    The group names to which the table belongs.
    """

    modified_time: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    The most recent time when any changes, updates, or modifications were made within the table.
    """

    modified_time_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    The most recent time when any changes, updates, or modifications were made within the table.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The table name, ordinarily as assigned by a database administrator.
    """

    size: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The size of the data table in bytes.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The unique identifier of the table.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
