# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .sharing_permission_sharing_permission_type_id import SharingPermissionSharingPermissionTypeId


class SharingPermission(UncheckedBaseModel):
    """
    The Sharing Permission type represents the permissions granted to recipients via a Sharing object.
    """

    sharing_permission_type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The sharing permission type, normalized to the caption of the sharing_permission_type_id value.
    """

    sharing_permission_type_id: SharingPermissionSharingPermissionTypeId = pydantic_v1.Field()
    """
    The normalized identifier of the sharing permission type.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
