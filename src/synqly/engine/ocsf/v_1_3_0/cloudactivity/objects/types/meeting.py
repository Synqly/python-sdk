# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from ...base.types.timestamp import Timestamp
from .meeting_attendee import MeetingAttendee


class Meeting(UncheckedBaseModel):
    """
    The Meeting object encompasses information relating to a meeting, such as might be present in typical office calendar software like Teams, Outlook, Google Calendar, etc.
    """

    attendees: typing.Optional[typing.List[MeetingAttendee]] = pydantic_v1.Field(default=None)
    """
    Actors who are attendees of the meeting.
    """

    end_time: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    Time at which the meeting is scheduled to end.
    """

    end_time_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Time at which the meeting is scheduled to end.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The meeting's display name.
    """

    start_time: typing.Optional[Timestamp] = pydantic_v1.Field(default=None)
    """
    Time at which the meeting is scheduled to begin.
    """

    start_time_dt: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Time at which the meeting is scheduled to begin.
    """

    uid: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique ID associated with the meeting.
    """

    urls: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    URLs associated with the meeting, e.g. video conference links.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
