# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .ja_4_fingerprint_type_id import Ja4FingerprintTypeId


class Ja4Fingerprint(UncheckedBaseModel):
    """
    The JA4+ fingerprint object provides detailed fingerprint information about various aspects of network traffic which is both machine and human readable.
    """

    section_a: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The 'a' section of the JA4 fingerprint.
    """

    section_b: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The 'b' section of the JA4 fingerprint.
    """

    section_c: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The 'c' section of the JA4 fingerprint.
    """

    section_d: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The 'd' section of the JA4 fingerprint.
    """

    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The JA4+ fingerprint type as defined by <a href='https://blog.foxio.io/ja4+-network-fingerprinting target='\_blank'>FoxIO</a>, normalized to the caption of 'type_id'. In the case of 'Other', it is defined by the event source.
    """

    type_id: Ja4FingerprintTypeId = pydantic_v1.Field()
    """
    The identifier of the JA4+ fingerprint type.
    """

    value: str = pydantic_v1.Field()
    """
    The JA4+ fingerprint value.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
