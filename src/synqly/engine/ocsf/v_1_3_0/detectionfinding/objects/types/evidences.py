# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ......core.unchecked_base_model import UncheckedBaseModel
from .actor import Actor
from .api import Api
from .container import Container
from .database import Database
from .databucket import Databucket
from .device import Device
from .dns_query import DnsQuery
from .email import Email
from .file import File
from .job import Job
from .network_connection_info import NetworkConnectionInfo
from .network_endpoint import NetworkEndpoint
from .process import Process
from .url import Url
from .user import User


class Evidences(UncheckedBaseModel):
    """
    A collection of evidence artifacts associated to the activity/activities that triggered a security detection.
    """

    actor: typing.Optional[Actor] = pydantic_v1.Field(default=None)
    """
    Describes details about the user/role/process that was the source of the activity that triggered the detection.
    """

    api: typing.Optional[Api] = pydantic_v1.Field(default=None)
    """
    Describes details about the API call associated to the activity that triggered the detection.
    """

    connection_info: typing.Optional[NetworkConnectionInfo] = pydantic_v1.Field(default=None)
    """
    Describes details about the network connection associated to the activity that triggered the detection.
    """

    container: typing.Optional[Container] = pydantic_v1.Field(default=None)
    """
    Describes details about the container associated to the activity that triggered the detection.
    """

    data: typing.Optional[typing.Any] = pydantic_v1.Field(default=None)
    """
    Additional evidence data that is not accounted for in the specific evidence attributes.<code> Use only when absolutely necessary.</code>
    """

    database: typing.Optional[Database] = pydantic_v1.Field(default=None)
    """
    Describes details about the database associated to the activity that triggered the detection.
    """

    databucket: typing.Optional[Databucket] = pydantic_v1.Field(default=None)
    """
    Describes details about the databucket associated to the activity that triggered the detection.
    """

    device: typing.Optional[Device] = pydantic_v1.Field(default=None)
    """
    An addressable device, computer system or host associated to the activity that triggered the detection.
    """

    dst_endpoint: typing.Optional[NetworkEndpoint] = pydantic_v1.Field(default=None)
    """
    Describes details about the destination of the network activity that triggered the detection.
    """

    email: typing.Optional[Email] = pydantic_v1.Field(default=None)
    """
    The email object associated to the activity that triggered the detection.
    """

    file: typing.Optional[File] = pydantic_v1.Field(default=None)
    """
    Describes details about the file associated to the activity that triggered the detection.
    """

    job: typing.Optional[Job] = pydantic_v1.Field(default=None)
    """
    Describes details about the scheduled job that was associated with the activity that triggered the detection.
    """

    process: typing.Optional[Process] = pydantic_v1.Field(default=None)
    """
    Describes details about the process associated to the activity that triggered the detection.
    """

    query: typing.Optional[DnsQuery] = pydantic_v1.Field(default=None)
    """
    Describes details about the DNS query associated to the activity that triggered the detection.
    """

    src_endpoint: typing.Optional[NetworkEndpoint] = pydantic_v1.Field(default=None)
    """
    Describes details about the source of the network activity that triggered the detection.
    """

    url: typing.Optional[Url] = pydantic_v1.Field(default=None)
    """
    The URL object that pertains to the event or object associated to the activity that triggered the detection.
    """

    user: typing.Optional[User] = pydantic_v1.Field(default=None)
    """
    Describes details about the user that was the target or somehow else associated with the activity that triggered the detection.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
