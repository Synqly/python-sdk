# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ParameterLocation(str, enum.Enum):
    HEADER = "header"
    PATH = "path"
    QUERY = "query"
    BODY = "body"
    _UNKNOWN = "__PARAMETERLOCATION_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ParameterLocation":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        header: typing.Callable[[], T_Result],
        path: typing.Callable[[], T_Result],
        query: typing.Callable[[], T_Result],
        body: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ParameterLocation.HEADER:
            return header()
        if self is ParameterLocation.PATH:
            return path()
        if self is ParameterLocation.QUERY:
            return query()
        if self is ParameterLocation.BODY:
            return body()
        return _unknown_member(self._value_)
