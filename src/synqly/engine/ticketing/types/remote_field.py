# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .remote_field_schema import RemoteFieldSchema
from .remote_field_scope import RemoteFieldScope


class RemoteField(UncheckedBaseModel):
    field_id: str = pydantic_v1.Field()
    """
    Remote ID of the field.
    """

    schema_: typing.Optional[RemoteFieldSchema] = pydantic_v1.Field(alias="schema", default=None)
    """
    Schema of the field.
    """

    field_scope: RemoteFieldScope = pydantic_v1.Field()
    """
    Scope of remote field - standard or some kind of customization?
    """

    provider_field_name: str = pydantic_v1.Field()
    """
    Name of field in the remote ticketing provider.
    """

    provider_field_path: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Path to the field in the remote ticketing provider. Uses dot notation for nested fields.
    """

    project_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Project id to which this field is scoped to
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
