# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...common.types.problem import Problem
from ...engine.types.api_response import ApiResponse
from ...engine.types.query_status import QueryStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UploadScanResponse(ApiResponse):
    scan_id: str = pydantic.Field()
    """
    ID of the scan.
    """

    status: QueryStatus = pydantic.Field()
    """
    Specifies the status of the upload scan job, which can be COMPLETE or PENDING.
    """

    errors: typing.Optional[Problem] = pydantic.Field(default=None)
    """
    Provides additional details about any errors encountered during the upload scan operation.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
