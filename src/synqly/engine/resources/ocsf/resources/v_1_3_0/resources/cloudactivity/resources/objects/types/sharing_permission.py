# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..........core.datetime_utils import serialize_datetime
from .sharing_permission_sharing_permission_type_id import SharingPermissionSharingPermissionTypeId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SharingPermission(pydantic.BaseModel):
    """
    The Sharing Permission type represents the permissions granted to recipients via a Sharing object.
    """

    sharing_permission_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The sharing permission type, normalized to the caption of the sharing_permission_type_id value.
    """

    sharing_permission_type_id: SharingPermissionSharingPermissionTypeId = pydantic.Field()
    """
    The normalized identifier of the sharing permission type.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
