# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..........core.datetime_utils import serialize_datetime
from ...base.types.timestamp import Timestamp

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class HttpCookie(pydantic.BaseModel):
    """
    The HTTP Cookie object, also known as a web cookie or browser cookie, contains details and values pertaining to a small piece of data that a server sends to a user's web browser. This data is then stored by the browser and sent back to the server with subsequent requests, allowing the server to remember and track certain information about the user's browsing session or preferences.
    """

    domain: typing.Optional[str] = pydantic.Field(default=None)
    """
    The domain name for the server from which the http_cookie is served.
    """

    expiration_time: typing.Optional[Timestamp] = pydantic.Field(default=None)
    """
    The expiration time of the HTTP cookie.
    """

    expiration_time_dt: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The expiration time of the HTTP cookie.
    """

    http_only: typing.Optional[bool] = pydantic.Field(default=None)
    """
    A cookie attribute to make it inaccessible via JavaScript
    """

    is_http_only: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This attribute prevents the cookie from being accessed via JavaScript.
    """

    is_secure: typing.Optional[bool] = pydantic.Field(default=None)
    """
    The cookie attribute indicates that cookies are sent to the server only when the request is encrypted using the HTTPS protocol.
    """

    name: str = pydantic.Field()
    """
    The HTTP cookie name.
    """

    path: typing.Optional[str] = pydantic.Field(default=None)
    """
    The path of the HTTP cookie.
    """

    samesite: typing.Optional[str] = pydantic.Field(default=None)
    """
    The cookie attribute that lets servers specify whether/when cookies are sent with cross-site requests. Values are: Strict, Lax or None
    """

    secure: typing.Optional[bool] = pydantic.Field(default=None)
    """
    The cookie attribute to only send cookies to the server with an encrypted request over the HTTPS protocol.
    """

    value: str = pydantic.Field()
    """
    The HTTP cookie value.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
