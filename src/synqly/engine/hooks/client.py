# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..common.errors.bad_gateway_error import BadGatewayError
from ..common.errors.bad_request_error import BadRequestError
from ..common.errors.conflict_error import ConflictError
from ..common.errors.forbidden_error import ForbiddenError
from ..common.errors.gateway_timeout_error import GatewayTimeoutError
from ..common.errors.internal_server_error import InternalServerError
from ..common.errors.method_not_allowed_error import MethodNotAllowedError
from ..common.errors.not_found_error import NotFoundError
from ..common.errors.not_implemented_error import NotImplementedError
from ..common.errors.service_unavailable_error import ServiceUnavailableError
from ..common.errors.too_many_requests_error import TooManyRequestsError
from ..common.errors.unauthorized_error import UnauthorizedError
from ..common.errors.unsupported_media_type_error import UnsupportedMediaTypeError
from ..common.types.problem import Problem
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class HooksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def proxy(
        self,
        *,
        token: str,
        request: typing.Any,
        meta: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Proxy webhook messages from webhook providers to webhook recievers. For exact webhook implementations please refer to providers e.g. Ticketing. This is just an API call used in that context, not a standalone implementation.

        Parameters
        ----------
        token : str
            Optional: if you can't use the HTTP Authorization Bearer, specify integration access token here.

        request : typing.Any

        meta : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from synqly.client import SynqlyEngine

        client = SynqlyEngine(
            token="YOUR_TOKEN",
        )
        client.hooks.proxy(
            meta="string",
            token="string",
            request={"key": "value"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/hooks",
            method="POST",
            params={"meta": meta, "token": token},
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def passthrough(
        self,
        web_hook_cursor: str,
        *,
        request: typing.Any,
        meta: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Proxy webhook messages from webhook providers to webhook recievers. For exact webhook implementations please refer to providers e.g. Ticketing. This is just an API call used in that context, not a standalone implementation.

        Parameters
        ----------
        web_hook_cursor : str

        request : typing.Any

        meta : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from synqly.client import SynqlyEngine

        client = SynqlyEngine(
            token="YOUR_TOKEN",
        )
        client.hooks.passthrough(
            web_hook_cursor="string",
            meta="string",
            request={"key": "value"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/hooks/passthrough/{jsonable_encoder(web_hook_cursor)}",
            method="POST",
            params={"meta": meta},
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncHooksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def proxy(
        self,
        *,
        token: str,
        request: typing.Any,
        meta: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Proxy webhook messages from webhook providers to webhook recievers. For exact webhook implementations please refer to providers e.g. Ticketing. This is just an API call used in that context, not a standalone implementation.

        Parameters
        ----------
        token : str
            Optional: if you can't use the HTTP Authorization Bearer, specify integration access token here.

        request : typing.Any

        meta : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from synqly.client import AsyncSynqlyEngine

        client = AsyncSynqlyEngine(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hooks.proxy(
                meta="string",
                token="string",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/hooks",
            method="POST",
            params={"meta": meta, "token": token},
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def passthrough(
        self,
        web_hook_cursor: str,
        *,
        request: typing.Any,
        meta: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Proxy webhook messages from webhook providers to webhook recievers. For exact webhook implementations please refer to providers e.g. Ticketing. This is just an API call used in that context, not a standalone implementation.

        Parameters
        ----------
        web_hook_cursor : str

        request : typing.Any

        meta : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from synqly.client import AsyncSynqlyEngine

        client = AsyncSynqlyEngine(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hooks.passthrough(
                web_hook_cursor="string",
                meta="string",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/hooks/passthrough/{jsonable_encoder(web_hook_cursor)}",
            method="POST",
            params={"meta": meta},
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
