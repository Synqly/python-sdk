# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class IntegrationTicketWhen(str, enum.Enum):
    AFTER = "after"
    ASYNC = "async"
    BEFORE = "before"
    DISPLAY = "display"
    _UNKNOWN = "__INTEGRATIONTICKETWHEN_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "IntegrationTicketWhen":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        after: typing.Callable[[], T_Result],
        async_: typing.Callable[[], T_Result],
        before: typing.Callable[[], T_Result],
        display: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is IntegrationTicketWhen.AFTER:
            return after()
        if self is IntegrationTicketWhen.ASYNC:
            return async_()
        if self is IntegrationTicketWhen.BEFORE:
            return before()
        if self is IntegrationTicketWhen.DISPLAY:
            return display()
        return _unknown_member(self._value_)
