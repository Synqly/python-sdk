# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CredentialType(str, enum.Enum):
    AWS = "aws"
    TOKEN = "token"
    BASIC = "basic"
    SECRET = "secret"
    O_AUTH_CLIENT = "o_auth_client"
    BRIDGE = "bridge"

    def visit(
        self,
        aws: typing.Callable[[], T_Result],
        token: typing.Callable[[], T_Result],
        basic: typing.Callable[[], T_Result],
        secret: typing.Callable[[], T_Result],
        o_auth_client: typing.Callable[[], T_Result],
        bridge: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CredentialType.AWS:
            return aws()
        if self is CredentialType.TOKEN:
            return token()
        if self is CredentialType.BASIC:
            return basic()
        if self is CredentialType.SECRET:
            return secret()
        if self is CredentialType.O_AUTH_CLIENT:
            return o_auth_client()
        if self is CredentialType.BRIDGE:
            return bridge()
