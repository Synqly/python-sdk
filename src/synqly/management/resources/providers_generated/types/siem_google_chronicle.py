# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .google_chronicle_credential import GoogleChronicleCredential

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SiemGoogleChronicle(pydantic.BaseModel):
    """
    Configuration for Google Chronicle as a SIEM Provider.
    """

    ingestion_credential: typing.Optional[GoogleChronicleCredential] = pydantic.Field(default=None)
    """
    Optional ingestion credential. Without this credential the provider will not be able to ingest events.
    """

    ingestion_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    (Optional) Ingestion URL for the Google Chronicle instance. This should be the base event ingestion URL, without any path components. Default "https://malachiteingestion-pa.googleapis.com"
    """

    search_credential: GoogleChronicleCredential
    search_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Search URL for the Google Chronicle instance. This should be the base event search URL, without any path components. Default "https://backstory.googleapis.com".
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
