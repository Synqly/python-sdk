# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...credentials.types.credential_id import CredentialId
from ...transforms.types.transform_id import TransformId
from .hooks_http_credential import HooksHttpCredential

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class HooksHttp(pydantic.BaseModel):
    """
    Configuration for a Webhook Provider
    """

    credential: HooksHttpCredential
    filter: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional webhook filter specification
    """

    source_events: typing.List[str] = pydantic.Field()
    """
    Events to hook or empty list for all events
    """

    source_secret: typing.Optional[CredentialId] = pydantic.Field(default=None)
    """
    Webhook verification secret
    """

    target_secret: typing.Optional[CredentialId] = pydantic.Field(default=None)
    """
    Add optional webhook secure hash for verification
    """

    transforms: typing.Optional[typing.List[TransformId]] = pydantic.Field(default=None)
    """
    Optional list of transformations used to modify the webhook responses.
    """

    url: str = pydantic.Field()
    """
    URL of the endpoint used for connecting to the external service.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
