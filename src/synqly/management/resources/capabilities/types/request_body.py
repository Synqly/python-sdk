# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class RequestBody(pydantic.BaseModel):
    """
    Describes the request body and its schema.
    """

    required: bool = pydantic.Field()
    """
    If true the request body is required, false otherwise.
    """

    schema_: typing.Dict[str, typing.Any] = pydantic.Field(alias="schema")
    """
    The schema defining the type used for the request body. If
    expanded will be a full JSON schema of the entire request body,
    otherwise this will be a reference object. The reference object
    has a single key `$ref`, which is a URI [RFC3986] identifying the
    location of a component within the Engine OpenAPI specification.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
