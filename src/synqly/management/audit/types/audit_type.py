# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AuditType(str, enum.Enum):
    ALARM = "ALARM"
    ERROR = "ERROR"
    API = "API"
    UNKNOWN = "UNKNOWN"
    _UNKNOWN = "__AUDITTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "AuditType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        alarm: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        api: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is AuditType.ALARM:
            return alarm()
        if self is AuditType.ERROR:
            return error()
        if self is AuditType.API:
            return api()
        if self is AuditType.UNKNOWN:
            return unknown()
        return _unknown_member(self._value_)
