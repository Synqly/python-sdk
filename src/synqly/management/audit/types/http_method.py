# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class HttpMethod(str, enum.Enum):
    DELETE = "DELETE"
    GET = "GET"
    PATCH = "PATCH"
    POST = "POST"
    PUT = "PUT"
    _UNKNOWN = "__HTTPMETHOD_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "HttpMethod":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        delete: typing.Callable[[], T_Result],
        get: typing.Callable[[], T_Result],
        patch: typing.Callable[[], T_Result],
        post: typing.Callable[[], T_Result],
        put: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is HttpMethod.DELETE:
            return delete()
        if self is HttpMethod.GET:
            return get()
        if self is HttpMethod.PATCH:
            return patch()
        if self is HttpMethod.POST:
            return post()
        if self is HttpMethod.PUT:
            return put()
        return _unknown_member(self._value_)
