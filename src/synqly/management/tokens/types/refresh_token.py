# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...common.types.base import Base
from ...common.types.id import Id
from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...token_base.types.token_id import TokenId
from ...token_base.types.token_owner_type import TokenOwnerType
from ...token_base.types.token_pair import TokenPair


class RefreshToken(Base):
    id: TokenId
    member_id: typing.Optional[Id] = pydantic_v1.Field(default=None)
    """
    Member Id
    """

    owner_id: Id = pydantic_v1.Field()
    """
    ID of the entity that owns this token
    """

    owner_type: TokenOwnerType = pydantic_v1.Field()
    """
    Type of the entity that owns this token
    """

    expires: dt.datetime = pydantic_v1.Field()
    """
    Time when this token expires and can no longer be used again.
    """

    token_ttl: str = pydantic_v1.Field()
    """
    Token time-to-live
    """

    primary: TokenPair = pydantic_v1.Field()
    """
    Primary running access and refresh tokens
    """

    secondary: typing.Optional[TokenPair] = pydantic_v1.Field(default=None)
    """
    Temporary secondary TokenPair created after a RefreshToken operation
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
