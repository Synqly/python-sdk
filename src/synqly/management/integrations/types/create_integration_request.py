# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from ...integration_points.types.integration_point_id import IntegrationPointId
from ...management.types.additional_mapping import AdditionalMapping
from ...management.types.mapping_chain import MappingChain
from ...providers_generated.types.provider_config import ProviderConfig
from .bridge_selector import BridgeSelector
from .webhook_config import WebhookConfig


class CreateIntegrationRequest(UncheckedBaseModel):
    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique short name for this Integrations (lowercase [a-z0-9_-], can be used in URLs). Also used for case insensitive duplicate name detection and default sort order. Defaults to IntegrationId if both name and fullname are not specified.
    """

    fullname: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Human friendly display name for this Integrations, will auto-generate 'name' field (if 'name' is not specified). Defaults to the same value as the 'name' field if not specified.
    """

    provider_config: ProviderConfig = pydantic_v1.Field()
    """
    Provider configuration for this Integration.
    """

    integration_point_id: typing.Optional[IntegrationPointId] = pydantic_v1.Field(default=None)
    """
    Integration Point associated with this integration.
    """

    bridge_selector: typing.Optional[BridgeSelector] = pydantic_v1.Field(default=None)
    """
    Use a Bridge to connect to the provider.
    """

    webhook_config: typing.Optional[WebhookConfig] = pydantic_v1.Field(default=None)
    """
    Web hook config for this integration
    """

    mappings: typing.Optional[typing.List[MappingChain]] = pydantic_v1.Field(default=None)
    """
    A list of mapping chains to apply to the integration. Each mapping chain is a list of mappings to apply to the integration in the order they should be applied. Mappings are applied by operation ID. Leave this empty to use the default default mappings.
    """

    additional_mappings: typing.Optional[typing.List[AdditionalMapping]] = pydantic_v1.Field(default=None)
    """
    Additional data mappings for this integration. This allows for custom data to be mapped to the custom_fields portion of the response.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
