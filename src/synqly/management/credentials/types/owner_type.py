# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OwnerType(str, enum.Enum):
    ACCOUNT = "account"
    INTEGRATION = "integration"
    INTEGRATION_POINT = "integration_point"
    ORGANIZATION_WEBHOOK = "organization_webhook"
    _UNKNOWN = "__OWNERTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "OwnerType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        account: typing.Callable[[], T_Result],
        integration: typing.Callable[[], T_Result],
        integration_point: typing.Callable[[], T_Result],
        organization_webhook: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is OwnerType.ACCOUNT:
            return account()
        if self is OwnerType.INTEGRATION:
            return integration()
        if self is OwnerType.INTEGRATION_POINT:
            return integration_point()
        if self is OwnerType.ORGANIZATION_WEBHOOK:
            return organization_webhook()
        return _unknown_member(self._value_)
