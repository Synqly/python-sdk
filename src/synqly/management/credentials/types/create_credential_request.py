# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .credential_config import CredentialConfig
from .owner_type import OwnerType


class CreateCredentialRequest(UncheckedBaseModel):
    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique short name for this Credential (lowercase [a-z0-9_-], can be used in URLs). Also used for case insensitive duplicate name detection and default sort order. Defaults to CredentialId if both name and fullname are not specified.
    """

    fullname: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Human friendly display name for this Credential, will auto-generate 'name' field (if 'name' is not specified). Defaults to the same value as the 'name' field if not specified.
    """

    config: typing.Optional[CredentialConfig] = pydantic_v1.Field(default=None)
    """
    Credential configuration
    """

    owner_type: typing.Optional[OwnerType] = pydantic_v1.Field(default=None)
    """
    One of `account` or `integration_point`; defaults to `account` if not specified.
    """

    expires: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Time when this credential expires and can no longer be used again.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
