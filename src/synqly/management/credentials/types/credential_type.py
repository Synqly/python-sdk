# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CredentialType(str, enum.Enum):
    AWS = "aws"
    TOKEN = "token"
    BASIC = "basic"
    SECRET = "secret"
    O_AUTH_CLIENT = "o_auth_client"
    _UNKNOWN = "__CREDENTIALTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "CredentialType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        aws: typing.Callable[[], T_Result],
        token: typing.Callable[[], T_Result],
        basic: typing.Callable[[], T_Result],
        secret: typing.Callable[[], T_Result],
        o_auth_client: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is CredentialType.AWS:
            return aws()
        if self is CredentialType.TOKEN:
            return token()
        if self is CredentialType.BASIC:
            return basic()
        if self is CredentialType.SECRET:
            return secret()
        if self is CredentialType.O_AUTH_CLIENT:
            return o_auth_client()
        return _unknown_member(self._value_)
