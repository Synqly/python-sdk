# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .google_service_account_credential import GoogleServiceAccountCredential


class SinkGoogleSecurityOperations(UncheckedBaseModel):
    """
    Configuration for Google Security Operations (formerly Google Chronicle) as a Sink Provider.

    [Configuration guide](https://docs.synqly.com/guides/provider-configuration/google-security-operations-sink-setup)
    """

    credential: GoogleServiceAccountCredential = pydantic_v1.Field()
    """
    Credentials used for accessing the Google SecOps instance.
    """

    customer_id: str = pydantic_v1.Field()
    """
    The customer ID of the Google SecOps instance
    """

    project_id: str = pydantic_v1.Field()
    """
    The project ID of the Google SecOps instance.
    """

    region: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The region of the Google SecOps instance. Usually `us` or `eu`.
    """

    url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The base URL for the Google SecOps API.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
