# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from ...credentials.types.token_credential_id import TokenCredentialId


class Rapid7InsightCloudCredential_Token(UncheckedBaseModel):
    secret: str
    type: typing.Literal["token"] = "token"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class Rapid7InsightCloudCredential_TokenId(UncheckedBaseModel):
    value: TokenCredentialId
    type: typing.Literal["token_id"] = "token_id"

    class Config:
        smart_union = True


Rapid7InsightCloudCredential = typing_extensions.Annotated[
    typing.Union[Rapid7InsightCloudCredential_Token, Rapid7InsightCloudCredential_TokenId],
    UnionMetadata(discriminant="type"),
]
