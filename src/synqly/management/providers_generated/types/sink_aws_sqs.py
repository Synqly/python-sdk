# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .aws_sqs_credential import AwsSqsCredential


class SinkAwsSqs(UncheckedBaseModel):
    """
    Configuration for Amazon Simple Queue Service (SQS).

    [Configuration guide](https://docs.synqly.com/guides/provider-configuration/aws-sqs-sink-setup)
    """

    credential: AwsSqsCredential = pydantic_v1.Field()
    """
    AWS Access Keys with write access to the configured SQS queue.
    """

    region: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Overrides the default AWS region. If not present, the region will be inferred from the URL.
    """

    url: str = pydantic_v1.Field()
    """
    URL of the SQS queue where events are sent.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
