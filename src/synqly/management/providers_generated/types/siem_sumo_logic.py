# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .sumo_logic_collection_url import SumoLogicCollectionUrl
from .sumo_logic_credential import SumoLogicCredential


class SiemSumoLogic(UncheckedBaseModel):
    """
    Configuration for Sumo Logic Cloud SIEM.

    [Configuration guide](https://docs.synqly.com/guides/provider-configuration/sumo-logic-setup)
    """

    auto_parse_logs: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Automatically parse logs as JSON when running log queries.
    """

    collection_url: typing.Optional[SumoLogicCollectionUrl] = pydantic_v1.Field(default=None)
    """
    Secure Sumo Logic Collection URL for writing events. If not provided, sending events to Sumo Logic is disabled.
    """

    credential: SumoLogicCredential
    siem_logs_only: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Only query for logs that have been processed into the Sumo Logic Cloud SIEM app.
    """

    url: str = pydantic_v1.Field()
    """
    Base URL for the Sumo Logic API.
    [Sumo Logic endpoints by deployment and firewall security](https://help.sumologic.com/docs/api/getting-started/#sumo-logic-endpoints-by-deployment-and-firewall-security).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
