# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from ...credentials.types.o_auth_client_credential_id import OAuthClientCredentialId
from ...credentials.types.secret_credential_id import SecretCredentialId


class TeamsCredential_OAuthClient(UncheckedBaseModel):
    token_url: typing.Optional[str] = None
    client_id: str
    client_secret: str
    extra: typing.Optional[typing.Dict[str, typing.Any]] = None
    type: typing.Literal["o_auth_client"] = "o_auth_client"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class TeamsCredential_OAuthClientId(UncheckedBaseModel):
    value: OAuthClientCredentialId
    type: typing.Literal["o_auth_client_id"] = "o_auth_client_id"

    class Config:
        frozen = True
        smart_union = True


class TeamsCredential_WebhookUrl(UncheckedBaseModel):
    secret: str
    type: typing.Literal["webhook_url"] = "webhook_url"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class TeamsCredential_WebhookUrlId(UncheckedBaseModel):
    value: SecretCredentialId
    type: typing.Literal["webhook_url_id"] = "webhook_url_id"

    class Config:
        frozen = True
        smart_union = True


TeamsCredential = typing_extensions.Annotated[
    typing.Union[
        TeamsCredential_OAuthClient,
        TeamsCredential_OAuthClientId,
        TeamsCredential_WebhookUrl,
        TeamsCredential_WebhookUrlId,
    ],
    UnionMetadata(discriminant="type"),
]
