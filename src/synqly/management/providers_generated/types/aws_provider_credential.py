# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from ...credentials.types.aws_credential_id import AwsCredentialId


class AwsProviderCredential_Aws(UncheckedBaseModel):
    access_key_id: str
    secret_access_key: str
    session: typing.Optional[str] = None
    type: typing.Literal["aws"] = "aws"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class AwsProviderCredential_AwsId(UncheckedBaseModel):
    value: AwsCredentialId
    type: typing.Literal["aws_id"] = "aws_id"

    class Config:
        smart_union = True


AwsProviderCredential = typing_extensions.Annotated[
    typing.Union[AwsProviderCredential_Aws, AwsProviderCredential_AwsId], UnionMetadata(discriminant="type")
]
