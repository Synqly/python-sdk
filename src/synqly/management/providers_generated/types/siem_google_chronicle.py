# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from .google_chronicle_credential import GoogleChronicleCredential


class SiemGoogleChronicle(UncheckedBaseModel):
    """
    Configuration for Google Security Operations (formerly Google Chronicle) as a SIEM Provider connecting via the older Backstory and Malachite APIs.

    [Configuration guide](https://docs.synqly.com/guides/provider-configuration/google-chronicle-setup)
    """

    customer_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The customer ID reported when writing events. This field is required if writing events.
    """

    ingestion_credential: typing.Optional[GoogleChronicleCredential] = pydantic_v1.Field(default=None)
    """
    Credentials used for writing events. If not specified then writing events is disabled.
    """

    ingestion_url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Base URL for the Google SecOps Ingestion API.
    """

    search_credential: GoogleChronicleCredential = pydantic_v1.Field()
    """
    Credentials used for querying and reading events.
    """

    search_url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Base URL for the Google SecOps Search API.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
