# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AdditionalMappingType(str, enum.Enum):
    RECOMMENDED = "recommended"
    OPTIONAL = "optional"
    FIXED = "fixed"
    _UNKNOWN = "__ADDITIONALMAPPINGTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "AdditionalMappingType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        recommended: typing.Callable[[], T_Result],
        optional: typing.Callable[[], T_Result],
        fixed: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is AdditionalMappingType.RECOMMENDED:
            return recommended()
        if self is AdditionalMappingType.OPTIONAL:
            return optional()
        if self is AdditionalMappingType.FIXED:
            return fixed()
        return _unknown_member(self._value_)
