# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class State(str, enum.Enum):
    DISABLED = "disabled"
    ENABLED = "enabled"
    FORGOTTEN = "forgotten"
    INVITED = "invited"
    LOCKED = "locked"
    _UNKNOWN = "__STATE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "State":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        disabled: typing.Callable[[], T_Result],
        enabled: typing.Callable[[], T_Result],
        forgotten: typing.Callable[[], T_Result],
        invited: typing.Callable[[], T_Result],
        locked: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is State.DISABLED:
            return disabled()
        if self is State.ENABLED:
            return enabled()
        if self is State.FORGOTTEN:
            return forgotten()
        if self is State.INVITED:
            return invited()
        if self is State.LOCKED:
            return locked()
        return _unknown_member(self._value_)
