# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...account_base.types.account_id import AccountId
from ...accounts.types.account import Account
from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from ...integration_base.types.integration_id import IntegrationId
from ...integrations.types.integration import Integration


class Status(UncheckedBaseModel):
    """
    Status object
    """

    created_at: dt.datetime = pydantic_v1.Field()
    """
    Time object was originally created
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    Last time object was updated
    """

    account_id: AccountId = pydantic_v1.Field()
    """
    Account associated with this status. Use the expand=accounts parameter with the List API to expand the Account to the full object
    """

    account: typing.Optional[Account] = pydantic_v1.Field(default=None)
    """
    When using the expand option on the List API, the full account object is included in the response
    """

    integration_id: IntegrationId = pydantic_v1.Field()
    """
    Integration associated with this status. Use the expand=integrations parameter with the List API to expand the Integration to the full object
    """

    integration: typing.Optional[Integration] = pydantic_v1.Field(default=None)
    """
    When using the expand option on the List API, the full integration object is included in the response
    """

    status: str = pydantic_v1.Field()
    """
    The current status of the notification.
    """

    requests: int = pydantic_v1.Field()
    """
    Request count
    """

    failed: int = pydantic_v1.Field()
    """
    Failed count
    """

    cpu_time: int = pydantic_v1.Field()
    """
    Cpu time in microseconds
    """

    db_ops: int = pydantic_v1.Field()
    """
    Database operations count
    """

    api_ops: int = pydantic_v1.Field()
    """
    API operations count
    """

    in_bytes: int = pydantic_v1.Field()
    """
    API input byte count
    """

    out_bytes: int = pydantic_v1.Field()
    """
    API output byte count
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
