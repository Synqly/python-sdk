# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ListStatusOptions(str, enum.Enum):
    ACCOUNT = "account"
    ACCOUNTS = "accounts"
    INTEGRATION = "integration"
    INTEGRATIONS = "integrations"
    ALL = "all"
    _UNKNOWN = "__LISTSTATUSOPTIONS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ListStatusOptions":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        account: typing.Callable[[], T_Result],
        accounts: typing.Callable[[], T_Result],
        integration: typing.Callable[[], T_Result],
        integrations: typing.Callable[[], T_Result],
        all_: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ListStatusOptions.ACCOUNT:
            return account()
        if self is ListStatusOptions.ACCOUNTS:
            return accounts()
        if self is ListStatusOptions.INTEGRATION:
            return integration()
        if self is ListStatusOptions.INTEGRATIONS:
            return integrations()
        if self is ListStatusOptions.ALL:
            return all_()
        return _unknown_member(self._value_)
