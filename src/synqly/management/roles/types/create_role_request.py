# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...core.unchecked_base_model import UncheckedBaseModel
from ...permissionset_base.types.permissions import Permissions
from ...role_base.types.resources import Resources


class CreateRoleRequest(UncheckedBaseModel):
    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique short name for this Role (lowercase [a-z0-9_-], can be used in URLs). Also used for case insensitive duplicate name detection and default sort order. Defaults to RoleId if both name and fullname are not specified.
    """

    fullname: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Human friendly display name for this Role, will auto-generate 'name' field (if 'name' is not specified). Defaults to the same value as the 'name' field if not specified.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Description of the resources included in the role and permissions granted on those resources. Includes details of when to use this role along with the intended personas.
    """

    resources: typing.Optional[Resources] = pydantic_v1.Field(default=None)
    """
    Selects the resources the permission set applies to.
    """

    permission_set: Permissions = pydantic_v1.Field()
    """
    Permission set for this role.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
