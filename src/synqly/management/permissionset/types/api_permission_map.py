# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
import typing
from .read_write_permissions import ReadWritePermissions
import pydantic
from .accounts_permissions import AccountsPermissions
from .alarms_permissions import AlarmsPermissions
from .alarm_policies_permissions import AlarmPoliciesPermissions
from .audit_permissions import AuditPermissions
from .auth_permissions import AuthPermissions
from .billing_permissions import BillingPermissions
from .bridges_permissions import BridgesPermissions
from .credentials_permissions import CredentialsPermissions
from .integrations_permissions import IntegrationsPermissions
from .integration_points_permissions import IntegrationPointsPermissions
from .operations_permissions import OperationsPermissions
from .mappings_permissions import MappingsPermissions
from .members_permissions import MembersPermissions
from .organization_permissions import OrganizationPermissions
from .permission_set_permissions import PermissionSetPermissions
from .roles_permissions import RolesPermissions
from .status_permissions import StatusPermissions
from .sub_orgs_permissions import SubOrgsPermissions
from .tokens_permissions import TokensPermissions
from .transforms_permissions import TransformsPermissions
from .webhooks_permissions import WebhooksPermissions
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ApiPermissionMap(UncheckedBaseModel):
    all_: typing.Optional[ReadWritePermissions] = pydantic.Field(
        alias="all", default=None
    )
    accounts: typing.Optional[AccountsPermissions] = None
    alarms: typing.Optional[AlarmsPermissions] = None
    alarm_policies: typing.Optional[AlarmPoliciesPermissions] = None
    audit: typing.Optional[AuditPermissions] = None
    auth: typing.Optional[AuthPermissions] = None
    billing: typing.Optional[BillingPermissions] = None
    bridges: typing.Optional[BridgesPermissions] = None
    credentials: typing.Optional[CredentialsPermissions] = None
    integrations: typing.Optional[IntegrationsPermissions] = None
    integration_points: typing.Optional[IntegrationPointsPermissions] = None
    operations: typing.Optional[OperationsPermissions] = None
    mappings: typing.Optional[MappingsPermissions] = None
    members: typing.Optional[MembersPermissions] = None
    organizations: typing.Optional[OrganizationPermissions] = None
    permission_set: typing.Optional[PermissionSetPermissions] = None
    roles: typing.Optional[RolesPermissions] = None
    status: typing.Optional[StatusPermissions] = None
    suborgs: typing.Optional[SubOrgsPermissions] = None
    tokens: typing.Optional[TokensPermissions] = None
    transforms: typing.Optional[TransformsPermissions] = None
    webhooks: typing.Optional[WebhooksPermissions] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
