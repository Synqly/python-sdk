# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ReadWriteActions(str, enum.Enum):
    READ = "read"
    READ_WRITE = "*"
    _UNKNOWN = "__READWRITEACTIONS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "ReadWriteActions":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        read: typing.Callable[[], T_Result],
        read_write: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is ReadWriteActions.READ:
            return read()
        if self is ReadWriteActions.READ_WRITE:
            return read_write()
        return _unknown_member(self._value_)
