# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..common.errors.bad_request_error import BadRequestError
from ..common.errors.conflict_error import ConflictError
from ..common.errors.forbidden_error import ForbiddenError
from ..common.errors.internal_server_error import InternalServerError
from ..common.errors.method_not_allowed_error import MethodNotAllowedError
from ..common.errors.not_found_error import NotFoundError
from ..common.errors.too_many_requests_error import TooManyRequestsError
from ..common.errors.unauthorized_error import UnauthorizedError
from ..common.errors.unsupported_media_type_error import UnsupportedMediaTypeError
from ..common.types.problem import Problem
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..permissionset_base.types.permissions import Permissions
from .types.get_permission_set_response import GetPermissionSetResponse
from .types.list_permission_sets_response import ListPermissionSetsResponse


class PermissionsetClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListPermissionSetsResponse:
        """
        Returns a list of all `PermissionSets` objects that match the query params.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPermissionSetsResponse

        Examples
        --------
        from synqly.client import SynqlyManagement

        client = SynqlyManagement(
            token="YOUR_TOKEN",
        )
        client.permissionset.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/permissionsets", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListPermissionSetsResponse, construct_type(type_=ListPermissionSetsResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, permissionset_id: Permissions, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPermissionSetResponse:
        """
        Returns the `PermissionSet` object matching `{permissionsetId}`. For more information on PermissionSets, refer to our
        [Synqly Overview](https://docs.synqly.com/docs/synqly-overview).

        Parameters
        ----------
        permissionset_id : Permissions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPermissionSetResponse

        Examples
        --------
        from synqly.client import SynqlyManagement

        client = SynqlyManagement(
            token="YOUR_TOKEN",
        )
        client.permissionset.get(
            permissionset_id="administrator",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/permissionsets/{jsonable_encoder(permissionset_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetPermissionSetResponse, construct_type(type_=GetPermissionSetResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPermissionsetClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListPermissionSetsResponse:
        """
        Returns a list of all `PermissionSets` objects that match the query params.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPermissionSetsResponse

        Examples
        --------
        import asyncio

        from synqly.client import AsyncSynqlyManagement

        client = AsyncSynqlyManagement(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.permissionset.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/permissionsets", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListPermissionSetsResponse, construct_type(type_=ListPermissionSetsResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, permissionset_id: Permissions, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPermissionSetResponse:
        """
        Returns the `PermissionSet` object matching `{permissionsetId}`. For more information on PermissionSets, refer to our
        [Synqly Overview](https://docs.synqly.com/docs/synqly-overview).

        Parameters
        ----------
        permissionset_id : Permissions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPermissionSetResponse

        Examples
        --------
        import asyncio

        from synqly.client import AsyncSynqlyManagement

        client = AsyncSynqlyManagement(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.permissionset.get(
                permissionset_id="administrator",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/permissionsets/{jsonable_encoder(permissionset_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetPermissionSetResponse, construct_type(type_=GetPermissionSetResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 409:
                raise ConflictError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(Problem, construct_type(type_=Problem, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
