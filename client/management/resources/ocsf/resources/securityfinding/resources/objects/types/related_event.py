# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ........core.datetime_utils import serialize_datetime


class RelatedEvent(pydantic.BaseModel):
    """
    The Related Event object describes an event related to a finding or detection as identified by the security product.
    """

    product_uid: typing.Optional[str] = pydantic.Field(
        description="The unique identifier of the product that reported the related event."
    )
    type: typing.Optional[str] = pydantic.Field(
        description="The type of the related event. For example: Process Activity: Launch."
    )
    type_uid: typing.Optional[int] = pydantic.Field(
        description="The unique identifier of the related event type. For example: 100701."
    )
    uid: str = pydantic.Field(description="The unique identifier of the related event.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
